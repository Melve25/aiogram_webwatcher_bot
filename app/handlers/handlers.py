from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_marked_section, Bold

from sqlalchemy.ext.asyncio import AsyncSession

from app.services.dao import get_or_create_user, add_website_for_user, get_user_websites, delete_user_website
from app.handlers.states import WebsiteUrl
from app.services.keyboards import inline_websites

router = Router()

# NOTE: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(Command('start'))
async def greeting_handler(message: Message, session: AsyncSession):
	await get_or_create_user(session=session, message=message)	
	await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}')

# NOTE: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–π –æ url —Å–∞–π—Ç–∞
@router.message(StateFilter(None), Command('add'))
async def add_website_handler(message: Message, state: FSMContext):
	await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å')
	await state.set_state(WebsiteUrl.url)

@router.message(StateFilter('*'), Command('exit'))
async def exit_state_handler(message: Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		await message.answer("–Ø –Ω–∏—á–µ–≥–æ –æ—Ç –≤–∞—Å –Ω–µ –∂–¥—É –º–Ω–µ –Ω–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å")
		return
	
	await state.clear()
	await message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –µ—â—ë?")

@router.message(WebsiteUrl.url, F.text)
async def get_url_handler(message: Message, session: AsyncSession, state:FSMContext):
	success, info = await add_website_for_user(session=session, message=message)

	if success:
		await state.update_data(url=info)
		await state.clear()
		await message.answer(f'–û—Ç–ª–∏—á–Ω–æ —è –Ω–∞—á–∞–ª —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞–π—Ç–æ–º {info}')
	else:
		await message.answer(info)

# NOTE: —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –±–∞–∑—ã
@router.message(Command('delete'))
async def delete_website_handler(message: Message, session: AsyncSession):
	websites = await get_user_websites(message=message, session=session)
	if not websites:
		await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤.")
		return
	
	await message.answer("–í—ã–±–µ—Ä–∏ —Å–∞–π—Ç –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å: ", reply_markup=await inline_websites(websites))

@router.callback_query(F.data.startswith('delete:'))
async def delete_website_callback(callback: CallbackQuery, session: AsyncSession):
	
	website_to_delete_id: int = int(callback.data.split('delete:')[1])

	await delete_user_website(website_to_delete_id, session=session)
	
	await callback.answer('üóëÔ∏è –°–∞–π—Ç —É–¥–∞–ª—ë–Ω.')
	await callback.message.edit_text('–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω ‚úÖ')


# NOTE: –ø–µ—Ä–µ—á–µ–Ω—å —Å–∞–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command('list'))
async def list_websites_handler(message: Message, session: AsyncSession):
	get_websites = await get_user_websites(message=message, session=session)
	websites = [website.url for website in get_websites]

	if not websites:
		await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤.")
		return
	
	content = as_marked_section(
		Bold("üåê –¢–≤–æ–∏ —Å–∞–π—Ç—ã:\n"),
		*websites,
		marker="    üîó "
	)
	text_to_answer = content.as_markdown()

	await message.answer(text_to_answer, parse_mode="Markdown")

#NOTE: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç
@router.message(Command('help'))
async def help_handler(message: Message):
	await message.answer('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏ –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º —Å–∞–π—Ç–æ–≤')